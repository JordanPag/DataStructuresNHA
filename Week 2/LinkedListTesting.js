console.log("Linked List Testing:");
let l = new LinkedList();
l.add("H");
l.add("e");
l.add("l");
l.add("l");
l.add("o");
console.log(l.length);
l.printList();
console.log(l.contains("o"));
l.remove("o");
console.log(l.length);
l.printList();
console.log(l.contains("o"));
l.remove("l");
console.log(l.length);
l.printList();
console.log(l.contains("l"));
l.remove("l");
console.log(l.length);
l.printList();
console.log(l.contains("l"));
console.log(l.peek());
l.remove("H");
l.printList();
console.log(l.peek());
console.log("\nDoubly Linked List Testing:");
let d = new DoublyLinkedList();
d.add("H");
d.add("e");
d.add("l");
d.add("l");
d.add("o");
console.log(d.length);
d.printList();
d.remove("l");
console.log(d.length);
d.printList();
console.log(d.contains("l"));
d.remove("l");
console.log(d.length);
d.printList();
console.log(d.contains("l"));
console.log(d.peek());
d.remove("H");
d.printList();
console.log(d.peek());
console.log("\nCircular Linked List Testing:");
let c = new CircularLinkedList();
c.add("H");
c.add("e");
c.add("l");
c.add("l");
c.add("o");
console.log(c.length);
c.printList();
c.remove("l");
console.log(c.length);
c.printList();
console.log(c.contains("l"));
c.remove("l");
console.log(c.length);
c.printList();
console.log(c.contains("l"));
console.log(c.peek());
c.remove("H");
c.printList();
console.log(l.peek());
